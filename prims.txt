//b) Write a C program for the Implementation of Primâ€™s Minimum spanning tree algorithm.

//Solution: 

#include<stdio.h>
int main()
{
    int adj_mat[10][10], visited[10]={0}, i, j, n, no_e=1, min, a, b, min_cost=0;
    printf("Enter number of nodes ");
    scanf("%d",&n);
    printf("Enter adj_mat in form of adjacency matrix\n");
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
        	   printf("\n%d is adjacent to %d (Wt||999)\n",i,j);
            scanf("%d",&adj_mat[i][j]);
        }
    }
    printf("Gicen adj_mat in form of adjacency matrix\n");
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            printf("%d\t",adj_mat[i][j]);
        }
        printf("\n");
    }
    printf("\n");
    // logic for finding minimum adj_mat spanning tree
    visited[1]=1; // visited first node
    while(no_e<n)
    {
        min=999;
        // in each cycle find minimum adj_mat 
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=n;j++)
            {
                if(adj_mat[i][j]<min)
                {
                    if(visited[i]!=0)
                    {
                        min=adj_mat[i][j];
                        a=i;
                        b=j;
                    }
                }
            }
        }
        //if node is not visited
        if(visited[b]==0)
        {
            printf("\n%d to %d  adj_mat=%d",a,b,min);
            min_cost=min_cost+min;
            no_e++;
        }
        visited[b]=1;
        // initialize with maximum value you can also use any other value
        adj_mat[a][b]=adj_mat[b][a]=999; 
    }
    printf("\nMinimum cost of MST is %d\n",min_cost);
    return 0;
}